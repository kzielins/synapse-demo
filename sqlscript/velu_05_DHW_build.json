{
	"name": "velu_05_DHW_build",
	"properties": {
		"description": "SQL Pool 1",
		"content": {
			"query": "-- ================\n-- StageProduct\n-- ================\n\n\nSELECT count(1) FROM velu.StageProduct\n--- load data\ntruncate table velu.StageProduct\n\n--- load data\n\nCOPY INTO velu.StageProduct\n    (ProductID, ProductName, ProductCategory, Color, Size, ListPrice, Discontinued)\nFROM 'https://asadatalake19hvmew.blob.core.windows.net/files/data/Product.csv'\nWITH\n(\n    FILE_TYPE = 'CSV',\n    MAXERRORS = 0,\n    IDENTITY_INSERT = 'OFF',\n    FIRSTROW = 2 ,\n    ERRORFILE = 'https://asadatalake19hvmew.dfs.core.windows.net/files/errors/Product/'\n);\n\nSELECT count(1) FROM velu.StageProduct;\n\n\n-- ================\n -- StageCustomer;\n-- ================\nSELECT count(1) FROM velu.StageCustomer;\ntruncate table velu.StageCustomer;\nCOPY INTO velu.StageCustomer\n(GeographyKey, CustomerAlternateKey, Title, FirstName, MiddleName, LastName, NameStyle, BirthDate, \nMaritalStatus, Suffix, Gender, EmailAddress, YearlyIncome, TotalChildren, NumberChildrenAtHome, EnglishEducation, \nSpanishEducation, FrenchEducation, EnglishOccupation, SpanishOccupation, FrenchOccupation, HouseOwnerFlag, \nNumberCarsOwned, AddressLine1, AddressLine2, Phone, DateFirstPurchase, CommuteDistance)\nFROM 'https://asadatalake19hvmew.dfs.core.windows.net/files/data/Customer.csv'\nWITH\n(\nFILE_TYPE = 'CSV'\n,MAXERRORS = 5\n,FIRSTROW = 2 -- skip header row\n,ERRORFILE = 'https://asadatalake19hvmew.dfs.core.windows.net/files/errors/Customer/'\n);\nSELECT count(1) FROM velu.StageCustomer;\n\n\n-- ================\n--DimProduct V2 as  CREATE TABLE AS (CTAS) statement\n-- ================\nCREATE TABLE velu.DimProductV2\nWITH\n(\n    DISTRIBUTION = HASH(ProductAltKey),\n    CLUSTERED COLUMNSTORE INDEX\n)\nAS\nSELECT ROW_NUMBER() OVER(ORDER BY ProductID) AS ProductKey,\n    ProductID AS ProductAltKey,\n    ProductName,\n    ProductCategory,\n    Color,\n    Size,\n    ListPrice,\n    Discontinued\nFROM velu.StageProduct;\n\n\n-- ================\n-- Slowy change dimension TYPe 1 i 2 (SCD1 , SCD2)\n-- ================\nINSERT INTO velu.DimCustomer ([GeographyKey],[CustomerAlternateKey],[Title],[FirstName],[MiddleName],[LastName],[NameStyle],[BirthDate],[MaritalStatus],\n[Suffix],[Gender],[EmailAddress],[YearlyIncome],[TotalChildren],[NumberChildrenAtHome],[EnglishEducation],[SpanishEducation],[FrenchEducation],\n[EnglishOccupation],[SpanishOccupation],[FrenchOccupation],[HouseOwnerFlag],[NumberCarsOwned],[AddressLine1],[AddressLine2],[Phone],\n[DateFirstPurchase],[CommuteDistance])\nSELECT *\nFROM velu.StageCustomer AS stg\nWHERE NOT EXISTS\n    (SELECT * FROM velu.DimCustomer AS dim\n    WHERE dim.CustomerAlternateKey = stg.CustomerAlternateKey);\n\n-- Type 1 updates (change name, email, or phone in place)\nUPDATE velu.DimCustomer\nSET LastName = stg.LastName,\n    EmailAddress = stg.EmailAddress,\n    Phone = stg.Phone\nFROM velu.DimCustomer dim inner join velu.StageCustomer stg\nON dim.CustomerAlternateKey = stg.CustomerAlternateKey\nWHERE dim.LastName <> stg.LastName OR dim.EmailAddress <> stg.EmailAddress OR dim.Phone <> stg.Phone\n\n-- Type 2 updates (address changes triggers new entry)\nINSERT INTO velu.DimCustomer\nSELECT stg.GeographyKey,stg.CustomerAlternateKey,stg.Title,stg.FirstName,stg.MiddleName,stg.LastName,stg.NameStyle,stg.BirthDate,stg.MaritalStatus,\nstg.Suffix,stg.Gender,stg.EmailAddress,stg.YearlyIncome,stg.TotalChildren,stg.NumberChildrenAtHome,stg.EnglishEducation,stg.SpanishEducation,stg.FrenchEducation,\nstg.EnglishOccupation,stg.SpanishOccupation,stg.FrenchOccupation,stg.HouseOwnerFlag,stg.NumberCarsOwned,stg.AddressLine1,stg.AddressLine2,stg.Phone,\nstg.DateFirstPurchase,stg.CommuteDistance\nFROM velu.StageCustomer AS stg\nJOIN velu.DimCustomer AS dim\nON stg.CustomerAlternateKey = dim.CustomerAlternateKey\nAND stg.AddressLine1 <> dim.AddressLine1;\n\n-- ================\n-- DHW OPT\n-- ================\nALTER INDEX ALL ON velu.DimProduct REBUILD;\n\nCREATE STATISTICS customergeo_stats ON velu.DimCustomer (GeographyKey);\n-- ================\n-- ================\n-- ================\n-- ================\n\n",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "SQLPool01",
				"poolName": "SQLPool01"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}