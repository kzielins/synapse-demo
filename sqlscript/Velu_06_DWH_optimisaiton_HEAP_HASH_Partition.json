{
	"name": "Velu_06_DWH_optimisaiton_HEAP_HASH_Partition",
	"properties": {
		"description": "https://github.com/solliancenet/azure-synapse-analytics-workshop-400/blob/master/day-02/activity03-dw-optimization.md",
		"content": {
			"query": "---optimisation query\n/* \nCREATE TABLE [velu].[Sale_Heap]\n(\n    [TransactionId] [uniqueidentifier]  NOT NULL,\n    [CustomerId] [int]  NOT NULL,\n    [ProductId] [smallint]  NOT NULL,\n    [Quantity] [smallint]  NOT NULL,\n    [Price] [decimal](9,2)  NOT NULL,\n    [TotalAmount] [decimal](9,2)  NOT NULL,\n    [TransactionDateId] [int]  NOT NULL,\n    [ProfitAmount] [decimal](9,2)  NOT NULL,\n    [Hour] [tinyint]  NOT NULL,\n    [Minute] [tinyint]  NOT NULL,\n    [StoreId] [smallint]  NOT NULL\n)\nWITH\n(\n    DISTRIBUTION = ROUND_ROBIN,\n    HEAP\n);\n*/\n\nSELECT\n    MIN(AvgPrice) as MinCustomerAvgPrice\n    ,MAX(AvgPrice) as MaxCustomerAvgPrice\n    ,MIN(AvgTotalAmount) as MinCustomerAvgTotalAmount\n    ,MAX(AvgTotalAmount) as MaxCustomerAvgTotalAmount\n    ,MIN(AvgProfitAmount) as MinAvgProfitAmount\n    ,MAX(AvgProfitAmount) as MaxAvgProfitAmount\nFROM\n(\n    SELECT\n        FS.CustomerID\n        ,MIN(FS.Quantity) as MinQuantity\n        ,MAX(FS.Quantity) as MaxQuantity\n        ,AVG(FS.Price) as AvgPrice\n        ,AVG(FS.TotalAmount) as AvgTotalAmount\n        ,AVG(FS.ProfitAmount) as AvgProfitAmount\n        ,COUNT(DISTINCT FS.StoreId) as DistinctStores\n    FROM\n        velu.Sale_Heap FS\n    GROUP BY\n        FS.CustomerId\n) T\n\n--- exlain\nEXPLAIN WITH_RECOMMENDATIONS\nSELECT TOP 1000 * FROM\n(\n    SELECT\n        S.CustomerId\n        ,SUM(S.TotalAmount) as TotalAmount\n    FROM\n        [velu].[Sale_Heap] S\n    GROUP BY\n        S.CustomerId\n) T\n-----\n/*\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<dsql_query number_nodes=\"1\" number_distributions=\"60\" number_distributions_per_node=\"60\">\n  <sql>SELECT TOP 1000 * FROM\n(\n    SELECT\n        S.CustomerId\n        ,SUM(S.TotalAmount) as TotalAmount\n    FROM\n        [velu].[Sale_Heap] S\n    GROUP BY\n        S.CustomerId\n) T</sql>\n  <materialized_view_candidates>\n    <materialized_view_candidates with_constants=\"False\">CREATE MATERIALIZED VIEW View1 WITH (DISTRIBUTION = HASH([Expr0])) AS\nSELECT [S].[CustomerId] AS [Expr0],\n       SUM([S].[TotalAmount]) AS [Expr1]\nFROM [velu].[Sale_Heap] [S]\nGROUP BY [S].[CustomerId]</materialized_view_candidates>\n  </materialized_view_candidates>\n  <dsql_operations total_cost=\"0.6588816\" total_number_operations=\"5\">\n    <dsql_operation operation_type=\"RND_ID\">\n      <identifier>TEMP_ID_175</identifier>\n    </dsql_operation>\n    <dsql_operation operation_type=\"ON\">\n      <location permanent=\"false\" distribution=\"AllDistributions\" />\n      <sql_operations>\n        <sql_operation type=\"statement\">CREATE TABLE [tempdb].[dbo].[TEMP_ID_175] ([CustomerId] INT NOT NULL, [col] DECIMAL(38, 2) NOT NULL ) WITH(DISTRIBUTED_MOVE_FILE='');</sql_operation>\n      </sql_operations>\n    </dsql_operation>\n    <dsql_operation operation_type=\"SHUFFLE_MOVE\">\n      <operation_cost cost=\"0.6588816\" accumulative_cost=\"0.6588816\" average_rowsize=\"13\" output_rows=\"12670.8\" GroupNumber=\"11\" />\n      <source_statement>SELECT [T1_1].[CustomerId] AS [CustomerId], [T1_1].[col] AS [col] FROM (SELECT SUM([T2_1].[TotalAmount]) AS [col], [T2_1].[CustomerId] AS [CustomerId] FROM [SQLPool01].[velu].[Sale_Heap] AS T2_1 GROUP BY [T2_1].[CustomerId]) AS T1_1\nOPTION (MAXDOP 1, MIN_GRANT_PERCENT = [MIN_GRANT], DISTRIBUTED_MOVE(N''))</source_statement>\n      <destination_table>[TEMP_ID_175]</destination_table>\n      <shuffle_columns>CustomerId;</shuffle_columns>\n    </dsql_operation>\n    <dsql_operation operation_type=\"RETURN\">\n      <location distribution=\"AllDistributions\" />\n      <select>SELECT [T1_1].[CustomerId] AS [CustomerId], [T1_1].[col] AS [col] FROM (SELECT TOP (CAST ((1000) AS BIGINT)) SUM([T2_1].[col]) AS [col], [T2_1].[CustomerId] AS [CustomerId] FROM [tempdb].[dbo].[TEMP_ID_175] AS T2_1 GROUP BY [T2_1].[CustomerId]) AS T1_1\nOPTION (MAXDOP 1, MIN_GRANT_PERCENT = [MIN_GRANT])</select>\n    </dsql_operation>\n    <dsql_operation operation_type=\"ON\">\n      <location permanent=\"false\" distribution=\"AllDistributions\" />\n      <sql_operations>\n        <sql_operation type=\"statement\">DROP TABLE [tempdb].[dbo].[TEMP_ID_175]</sql_operation>\n      </sql_operations>\n    </dsql_operation>\n  </dsql_operations>\n</dsql_query>\n*/\n\n\n--- create with HASH\nCREATE TABLE [velu].[Sale_Hash]\nWITH\n(\n    DISTRIBUTION = HASH ( [CustomerId] ),\n    CLUSTERED COLUMNSTORE INDEX\n)\nAS\nSELECT\n    *\nFROM\n    [velu].[Sale_Heap];;\nGo\n\n--- check\nSELECT TOP 1000 * FROM\n(\n    SELECT\n        S.CustomerId\n        ,SUM(S.TotalAmount) as TotalAmount\n    FROM\n        [velu].[Sale_Hash] S\n    GROUP BY\n        S.CustomerId\n) T\n\n\n---- explain\n\nEXPLAIN\nSELECT TOP 1000 * FROM\n(\n    SELECT\n        S.CustomerId\n        ,SUM(S.TotalAmount) as TotalAmount\n    FROM\n        [velu].[Sale_Hash] S\n    GROUP BY\n        S.CustomerId\n) T\n\n--- more complex for parition\nSELECT\n    AVG(TotalProfit) as AvgMonthlyCustomerProfit\nFROM\n(\n    SELECT\n        S.CustomerId\n        ,D.Year\n        ,D.Month\n        ,SUM(S.TotalAmount) as TotalAmount\n        ,AVG(S.TotalAmount) as AvgAmount\n        ,SUM(S.ProfitAmount) as TotalProfit\n        ,AVG(S.ProfitAmount) as AvgProfit\n    FROM\n        [velu].[Sale_Hash] S\n        join [wwi].[Date] D on\n            D.DateId = S.TransactionDateId\n    GROUP BY\n        S.CustomerId\n        ,D.Year\n        ,D.Month\n) T\nGo\n\n--- paritioning\nCREATE TABLE [velu].[Sale_Partition01]\nWITH\n(\n\tDISTRIBUTION = HASH ( [CustomerId] ),\n\tCLUSTERED COLUMNSTORE INDEX,\n\tPARTITION\n\t(\n\t\t[TransactionDateId] RANGE RIGHT FOR VALUES (\n            20190101, 20190201, 20190301, 20190401, 20190501, 20190601, 20190701, 20190801, 20190901, 20191001, 20191101, 20191201)\n\t)\n)\nAS\nSELECT\n\t*\nFROM\t\n\t[velu].[Sale_Heap]\nOPTION  (LABEL  = 'CTAS : Sale_Partition01')\ngo\n\n\nCREATE TABLE [velu].[Sale_Partition02]\nWITH\n(\n\tDISTRIBUTION = HASH ( [CustomerId] ),\n\tCLUSTERED COLUMNSTORE INDEX,\n\tPARTITION\n\t(\n\t\t[TransactionDateId] RANGE RIGHT FOR VALUES (\n            20190101, 20190401, 20190701, 20191001)\n\t)\n)\nAS\nSELECT *\nFROM\n    [velu].[Sale_Heap]\nOPTION  (LABEL  = 'CTAS : Sale_Partition02')\nGO\n\n\n--- check\nSELECT\n    AVG(TotalProfit) as AvgMonthlyCustomerProfit\nFROM\n(\n    SELECT\n        S.CustomerId\n        ,S.TransactionDateId\n        ,SUM(S.TotalAmount) as TotalAmount\n        ,AVG(S.TotalAmount) as AvgAmount\n        ,SUM(S.ProfitAmount) as TotalProfit\n        ,AVG(S.ProfitAmount) as AvgProfit\n    FROM\n        [velu].[Sale_Partition01] S\n    GROUP BY\n        S.CustomerId,\n        S.TransactionDateId\n) T\nGO\n---- create materialized view\n\nCREATE MATERIALIZED VIEW\n    velu.mvSaleCustomer\nWITH\n(\n    DISTRIBUTION = HASH( CustomerId )\n)\nAS \n SELECT\n        S.CustomerId\n        ,S.TransactionDateId\n        ,SUM(S.TotalAmount) as TotalAmount\n        ,AVG(S.TotalAmount) as AvgAmount\n        ,SUM(S.ProfitAmount) as TotalProfit\n        ,AVG(S.ProfitAmount) as AvgProfit\n    FROM\n        [velu].[Sale_Hash] S\n    GROUP BY\n        S.CustomerId,\n        S.TransactionDateId\nGO\n \n---- explain\nEXPLAIN \nselect top 1100 * from ( \n SELECT\n        S.CustomerId\n        ,S.TransactionDateId\n        ,SUM(S.TotalAmount) as TotalAmount\n        ,AVG(S.TotalAmount) as AvgAmount\n        ,SUM(S.ProfitAmount) as TotalProfit\n        ,AVG(S.ProfitAmount) as AvgProfit\n    FROM\n        [velu].[Sale_Hash] S\n    GROUP BY\n        S.CustomerId,\n        S.TransactionDateId\n) T",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "SQLPool01",
				"poolName": "SQLPool01"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}